import unittest
from flask import Flask, json
from meal_suggestions import meal_suggestions
from unittest.mock import patch

class TestMealSuggestions(unittest.TestCase):

    def setUp(self):
        self.app = Flask(__name__)
        self.app.register_blueprint(meal_suggestions)
        self.client = self.app.test_client()

    @patch('meal_suggestions.openai.ChatCompletion.create')
    def test_get_meal_recommendations_success(self, mock_openai):
        mock_openai.return_value = {
            'choices': [
                {'message': {'content': "Breakfast: Oatmeal\nLunch: Salad\nDinner: Grilled Chicken"}}
            ]
        }

        data = {
            "goal": "lose weight",
            "diet_preference": "vegan"
        }
        response = self.client.post('/suggest_meals', data=json.dumps(data), content_type='application/json')
        self.assertEqual(response.status_code, 200)

        response_data = response.get_json()
        self.assertTrue(response_data['success'])
        self.assertIn("Breakfast", response_data['meals'])

    @patch('meal_suggestions.openai.ChatCompletion.create')
    def test_suggest_meals_route_no_data(self, mock_openai):
        response = self.client.post('/suggest_meals', data={}, content_type='application/json')
        self.assertEqual(response.status_code, 400)

        response_data = response.get_json()
        self.assertFalse(response_data['success'])
        self.assertEqual(response_data['error'], 'Invalid input')

    @patch('meal_suggestions.openai.ChatCompletion.create')
    def test_suggest_meals_route_error(self, mock_openai):
        mock_openai.side_effect = Exception("API Error")
        data = {
            "goal": "build muscle",
            "diet_preference": "paleo"
        }
        response = self.client.post('/suggest_meals', data=json.dumps(data), content_type='application/json')
        self.assertEqual(response.status_code, 500)

        response_data = response.get_json()
        self.assertFalse(response_data['success'])
        self.assertIn("API Error", response_data['error'])

if __name__ == '__main__':
    unittest.main()